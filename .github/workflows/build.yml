name: Build Electron App

on:
  push:
    tags:
      - 'v*'  # Trigger the workflow on any tag push
  pull_request:  # Trigger the workflow on each PR

env:
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}  # Set the GH_TOKEN globally

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Clear NPM Cache
        run: npm cache clean --force

      - name: Install dependencies
        run: npm install

      - name: Build Linux AppImage
        run: npm run build:linux

      - name: Upload Linux AppImage
        uses: actions/upload-artifact@v4
        with:
          name: jg-desktop-linux
          path: dist/*.AppImage

      - name: List Linux dist directory
        run: ls -la dist  # List contents after building

  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Clear NPM Cache
        run: npm cache clean --force

      - name: Install dependencies
        run: npm install

      - name: Build Windows Packages
        run: npm run build:win

      - name: Upload Windows Installer
        uses: actions/upload-artifact@v4
        with:
          name: jg-desktop-windows
          path: dist/*.exe

      - name: List Windows dist directory
        run: dir dist  # List contents after building

  build-macos:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Clear NPM Cache
        run: npm cache clean --force

      - name: Install dependencies
        run: npm install

      - name: Build macOS Packages
        run: npm run build:mac

      - name: Upload macOS Package
        uses: actions/upload-artifact@v4
        with:
          name: jg-desktop-macos
          path: dist/*.dmg

      - name: List macOS dist directory
        run: ls -la dist  # List contents after building

  # Conditional Release Creation on Tagged Push
  create-release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download Linux AppImage
        uses: actions/download-artifact@v4
        with:
          name: jg-desktop-linux
          path: ./dist

      - name: Download Windows Installer
        uses: actions/download-artifact@v4
        with:
          name: jg-desktop-windows
          path: ./dist

      - name: Download macOS Package
        uses: actions/download-artifact@v4
        with:
          name: jg-desktop-macos
          path: ./dist

      - name: List files in dist directory for debugging
        run: ls -la ./dist  # List contents of the dist directory

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}  # Ensure GH_TOKEN is set
        run: |
          TAG_NAME="${{ github.ref_name }}"  # Get the tag name (e.g., 'refs/tags/v0.0.8')
          set -x  # Enable verbose output
          ls -la ./dist  # List files before creating the release
          echo "Creating release with the following files:"
          for file in ./dist/*; do
            echo "$file"
          done
          gh release create "$TAG_NAME" \
            --title "$TAG_NAME" \
            --notes "Release for $TAG_NAME" \
            ./dist/*
